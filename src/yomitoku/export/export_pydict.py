def convert_to_dict(inputs, include_figures=False, **kwargs):
    """
    Convert a yomitoku OCR result object into a dictionary format.
    This function follows the naming pattern of other export modules.

    Parameters:
        inputs: OCR result object from yomitoku
        include_figures (bool): Whether to include figure metadata
        **kwargs: Additional arguments (for compatibility with other export functions)

    Returns:
        dict: Structured dictionary with paragraphs, tables, and figures
    """
    return convert_yomitoku_to_dict(inputs, include_figures=include_figures)


def save_to_dict(data, out_path, **kwargs):
    """
    Save dictionary data to a Python file as a variable assignment.
    This allows the data to be imported as a Python module.

    Parameters:
        data (dict): Dictionary data to save
        out_path (str): Output file path (should end with .py)
        **kwargs: Additional arguments for compatibility
    """
    import os
    from pprint import pformat

    # Ensure the output path ends with .py
    if not out_path.endswith(".py"):
        out_path = os.path.splitext(out_path)[0] + ".py"

    # Create the directory if it doesn't exist (handle current directory case)
    out_dir = os.path.dirname(out_path)
    if out_dir:
        os.makedirs(out_dir, exist_ok=True)

    with open(out_path, "w", encoding="utf-8") as f:
        f.write("# Generated by yomitoku export_to_dict\n")
        f.write("yomitoku_result = ")
        # Use pprint.pformat for a readable, valid Python literal representation
        f.write(pformat(data, width=100, depth=None))
        f.write("\n")


def export_to_dict(inputs, out_path=None, include_figures=False, **kwargs):
    """
    Export yomitoku results to a Python dictionary file.
    This function follows the same pattern as other export functions.

    Parameters:
        inputs: OCR result object from yomitoku
        out_path (str, optional): Output file path (will be saved as .py file). If None, only returns the data without saving.
        include_figures (bool): Whether to include figure metadata
        **kwargs: Additional arguments for compatibility with other export functions

    Returns:
        The converted dictionary data
    """
    data = convert_to_dict(inputs, include_figures=include_figures, **kwargs)
    if out_path is not None:
        save_to_dict(data, out_path, **kwargs)
    return data


def convert_yomitoku_to_dict(inputs, include_figures=False):
    """
    Convert a yomitoku OCR result object into a dictionary format.
    Extracts paragraphs, tables, and optionally figures with their content and metadata.

    Parameters:
        inputs: OCR result object from yomitoku
        include_figures (bool): Whether to include figure metadata

    Returns:
        dict: Structured dictionary with paragraphs, tables, and figures
    """
    result_dict = {"paragraphs": [], "tables": [], "figures": []}

    # Extract paragraphs
    for para in getattr(inputs, "paragraphs", []):
        result_dict["paragraphs"].append(
            {
                "order": getattr(para, "order", None),
                "role": getattr(para, "role", None),
                "box": getattr(para, "box", None),
                "contents": getattr(para, "contents", None),
            }
        )

    # Extract tables
    for table in getattr(inputs, "tables", []):
        table_data = {
            "order": getattr(table, "order", None),
            "box": getattr(table, "box", None),
            "n_row": getattr(table, "n_row", None),
            "n_col": getattr(table, "n_col", None),
            "cells": [],
        }
        for cell in getattr(table, "cells", []):
            table_data["cells"].append(
                {
                    "row": getattr(cell, "row", None),
                    "col": getattr(cell, "col", None),
                    "row_span": getattr(cell, "row_span", None),
                    "col_span": getattr(cell, "col_span", None),
                    "box": getattr(cell, "box", None),
                    "contents": getattr(cell, "contents", None),
                }
            )
        result_dict["tables"].append(table_data)

    # Extract figures if requested
    if include_figures:
        for fig in getattr(inputs, "figures", []):
            figure_data = {"order": getattr(fig, "order", None), "box": getattr(fig, "box", None), "paragraphs": []}
            for para in getattr(fig, "paragraphs", []):
                figure_data["paragraphs"].append(
                    {
                        "order": getattr(para, "order", None),
                        "role": getattr(para, "role", None),
                        "box": getattr(para, "box", None),
                        "contents": getattr(para, "contents", None),
                    }
                )
            result_dict["figures"].append(figure_data)

    return result_dict
